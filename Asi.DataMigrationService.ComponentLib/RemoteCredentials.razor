@using Asi.DataMigrationService.Core.Client
@using Asi.DataMigrationService.Lib.Publisher
@inject ICommonServiceHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject IJSRuntime JsRuntime;

<MatPaper Outlined="true" Rounded="true" Style="width:25em;">
    <MatTextField label="Url" Required="true" Type="" MaxLength="100" @bind-Value="@url" FullWidth="true"  />
    <MatTextField label="User name" Required="true" MaxLength="100" @bind-Value="@userName" FullWidth="true" />
    <MatTextField label="Password" Required="true" Type="password" MaxLength="100" @bind-Value="@password" FullWidth="true" />
    <div class="m-3">
        <MatButton @onclick="SaveAsync" Type="submit" Outlined="true" Class="mr-1">Submit</MatButton>
        <MatButton @onclick="CancelAsync" Type="cancel" Outlined="true">Cancel</MatButton>
    </div>
</MatPaper>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    public string loginInformationUrl { get; set; } = string.Empty;
    public string loginInformationUserName { get; set; } = string.Empty;

    protected async Task WriteCookies()
    {
        var cookieExpDays = 30;
        if (BlazoredModal.Title.Contains("Target"))
        {
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "targetUrl", LoginInformation.Uri.ToString(), cookieExpDays);
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "targetUserName", LoginInformation.UserCredentials.UserName, cookieExpDays);
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "sourceUrl", LoginInformation.Uri.ToString(), cookieExpDays);
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "sourceUserName", LoginInformation.UserCredentials.UserName, cookieExpDays);
        }
    }

    protected async Task ReadCookies()
    {
        if (BlazoredModal.Title.Contains("Target"))
        {
            loginInformationUrl = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "targetUrl");
            loginInformationUserName = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "targetUserName");
        }
        else
        {
            loginInformationUrl = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "sourceUrl");
            loginInformationUserName = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "sourceUserName");
        }
    }

    string url
    {
        get
        {
            if (!string.IsNullOrEmpty(loginInformationUrl) && Uri.TryCreate(loginInformationUrl, UriKind.Absolute, out var uri))
            {
                LoginInformation.Uri = uri;
                return uri.ToString();
            }
            return LoginInformation.Uri.ToString();
        }
        set
        {
            if (value != null && !value.EndsWith("/", StringComparison.OrdinalIgnoreCase))
                value += "/";
            if (Uri.TryCreate(value, UriKind.Absolute, out var uri))
            {
                LoginInformation.Uri = uri;
                if (uri != null)
                    loginInformationUrl = uri.ToString();
            }
        }
    }
    string userName
    {
        get
        {
            if (!string.IsNullOrEmpty(loginInformationUserName))
                return LoginInformation.UserCredentials.UserName = loginInformationUserName;
            return LoginInformation.UserCredentials.UserName;
        }
        set
        {
            if (value != null && value != LoginInformation.UserCredentials.UserName)
                loginInformationUserName = value;
            
            LoginInformation.UserCredentials = new Asi.Core.Interfaces.UserCredentials(value, LoginInformation.UserCredentials.Password);
        }
    }
    string password
    {
        get { return LoginInformation.UserCredentials.Password; }
        set
        {
            LoginInformation.UserCredentials = new Asi.Core.Interfaces.UserCredentials(LoginInformation.UserCredentials.UserName, value);
        }
    }

    [Parameter]
    public LoginInformation LoginInformation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReadCookies();
    }

    async Task SaveAsync()
    {
        if (!LoginInformation.IsComplete)
        {
            Toaster.Add("Enter all required fields", MatToastType.Warning);
            return;
        }
        var service = ClientFactory.Create<Asi.Soa.Membership.ServiceContracts.IMembershipSettingsService>(LoginInformation.Uri, LoginInformation.UserCredentials);
        var response = await service.FindByIdAsync("0");
        LoginInformation.IsValidated = response.IsSuccessStatusCode;

        if (response.IsSuccessStatusCode)
        {
            var userSecurity = ClientFactory.Create<Asi.Soa.Membership.ServiceContracts.IUserSecurityService>(LoginInformation.Uri, LoginInformation.UserCredentials);
            var userRoles = userSecurity.GetUserRoles(LoginInformation.UserCredentials.UserName);
            if (((Asi.Soa.Core.DataContracts.ServiceResponse)userRoles).IsSuccessStatusCode &&
                userRoles.Result.Any(i => i.RoleName.Equals("SysAdmin", StringComparison.OrdinalIgnoreCase)))
            {
                await BlazoredModal.CloseAsync();
            }
            else
            {
                Toaster.Add(((Asi.Soa.Core.DataContracts.ServiceResponse)userRoles).Message, MatToastType.Warning);
            }
        }
        else
        {
            Toaster.Add(response.Message, MatToastType.Warning);
        }

        await WriteCookies();
    }

    Task CancelAsync()
    {
        BlazoredModal.CancelAsync();
        return Task.CompletedTask;
    }
}